<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <IsPackable>false</IsPackable>
    <SpaRoot>ClientApp\</SpaRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
    <UserSecretsId>5b142794-66b1-4fe4-b2ce-4e36bbf116de</UserSecretsId>
    <AssemblyName>CF.Web</AssemblyName>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="BuildBundlerMinifier" Version="3.2.449" />
    <PackageReference Include="Microsoft.CodeAnalysis.NetAnalyzers" Version="6.0.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.TypeScript.MSBuild" Version="4.8.4">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="6.0.10" />
  </ItemGroup>

  <ItemGroup>
    <DotNetCliToolReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Tools" Version="2.0.1" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\CF.Application\CF.Application.csproj" />
    <ProjectReference Include="..\CF.Common\CF.Common.csproj" />
    <ProjectReference Include="..\CF.Domain\CF.Domain.csproj" />
    <ProjectReference Include="..\CF.Web.AspNetCore\CF.Web.AspNetCore.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Content Update="appsettings.Development.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Update="appsettings.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Update="appsettings.Staging.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>

  <ItemGroup>
    <Content Remove="wwwroot\js\common.ts" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="wwwroot\dist\" />
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build" />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)build\**; $(SpaRoot)build-ssr\**" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <TypeScriptTarget>ES5</TypeScriptTarget>
    <TypeScriptJSXEmit>React</TypeScriptJSXEmit>
    <TypeScriptModuleKind />
    <TypeScriptCompileOnSaveEnabled>True</TypeScriptCompileOnSaveEnabled>
    <TypeScriptNoImplicitAny>False</TypeScriptNoImplicitAny>
    <TypeScriptRemoveComments>False</TypeScriptRemoveComments>
    <TypeScriptOutFile />
    <TypeScriptOutDir />
    <TypeScriptGeneratesDeclarations>False</TypeScriptGeneratesDeclarations>
    <TypeScriptNoEmitOnError>True</TypeScriptNoEmitOnError>
    <TypeScriptSourceMap>True</TypeScriptSourceMap>
    <TypeScriptMapRoot />
    <TypeScriptSourceRoot />
  </PropertyGroup>

  <!--  When running with the IIS profile, ensure the application pool is recycled to release locks on files held by the IIS application pool (w3wp) process. 
        This doesn't appear necessary as of MSBuild.exe 16.9+ (VS 2019) when:
          - Running as Administrator.
          - The application pool is started prior to the build.
          - The IIS profile is being used from launchSettings.json configured as:
            "iisSettings": {
            ...
              "iis": {
                "applicationUrl": "https://localhost/CF.Web",
                "sslPort": 443
              },
            ...
            },
            "profiles": {
            ...
              "IIS": {
                "commandName": "IIS",
                "launchBrowser": true,
                "environmentVariables": {
                  "ASPNETCORE_ENVIRONMENT": "Development"
                },
                "ancmHostingModel": "InProcess"
              }
            ...
            }
        Note: if the application pool is stopped prior to the build, it will not be started when the build completes.
        Not running VS as Administrator can result in: error MSB3073: The command "C:\Windows\System32\inetsrv\appcmd.exe recycle APPPOOL "CF.Web"" exited with code 50.
  -->
  <Target Name="IISDebugIISAppPoolStop" BeforeTargets="BeforeBuild" Condition="'$(ActiveDebugProfile)' == 'IIS' And $(MSBuildToolsVersion) &lt; 16.0 And Exists('C:\Windows\System32\inetsrv\appcmd.exe')">
    <!--  Recycle application pool to release locks on files that can prevent publishing. 
          A start is performed before the recycle because calling recycle on a stopped application pool throws an error.
      -->
    <Exec Command="c:\Windows\System32\inetsrv\appcmd.exe start APPPOOL &quot;CF.Web&quot;" /> 
    <Exec Command="c:\Windows\System32\inetsrv\appcmd.exe recycle APPPOOL &quot;CF.Web&quot;" />
  </Target>
  <!-- When running with IIS, user secrets must be copied to the web.config folder. -->
  <Target Name="IISDebugCopyUserSecrets" AfterTargets="AfterBuild" Condition="'$(ActiveDebugProfile)' == 'IIS'">
    <Copy SourceFiles="$(APPDATA)\Microsoft\UserSecrets\$(UserSecretsId)\secrets.json" DestinationFolder="$(ProjectDir)" SkipUnchangedFiles="true"></Copy>
  </Target>
  <!-- When running with IIS, copy the corresponding web.config. -->
  <Target Name="IISDebugCopyWebConfig" AfterTargets="AfterBuild" Condition="'$(ActiveDebugProfile)' == 'IIS'">
    <Copy SourceFiles="$(ProjectDir)\web.config.iis" DestinationFiles="$(OutDir)\web.config" SkipUnchangedFiles="true"></Copy>
  </Target>
  <!--  When running with IIS, ensure the application pool is started after successful builds. 
        This is always done for the IIS profile to ensure the pool is active (i.e. if it was stopped at the start of the build and VS did not stop/start it).
        See comments above for more details.
  -->
  <Target Name="IISDebugIISAppPoolStart" AfterTargets="AfterBuild" Condition="'$(ActiveDebugProfile)' == 'IIS' And Exists('C:\Windows\System32\inetsrv\appcmd.exe')">
    <Exec Command="C:\Windows\System32\inetsrv\appcmd.exe start APPPOOL &quot;CF.Web&quot;"></Exec>
  </Target>

  <!-- When running with IIS Express, copy the corresponding web.config. -->
  <Target Name="IISExpressDebugCopyWebConfig" AfterTargets="AfterBuild" Condition="'$(ActiveDebugProfile)' == 'IIS Express'">
    <Copy SourceFiles="$(ProjectDir)\web.config.iisexpress" DestinationFiles="$(ProjectDir)\web.config" SkipUnchangedFiles="true"></Copy>
  </Target>
</Project>
