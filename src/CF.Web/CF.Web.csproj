<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>netcoreapp3.1</TargetFramework>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <IsPackable>false</IsPackable>
    <SpaRoot>ClientApp\</SpaRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
    <UserSecretsId>5b142794-66b1-4fe4-b2ce-4e36bbf116de</UserSecretsId>
    <AssemblyName>CF.Web</AssemblyName>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="BuildBundlerMinifier" Version="3.2.435" />
    <PackageReference Include="Microsoft.CodeAnalysis.FxCopAnalyzers" Version="2.9.8">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.TypeScript.MSBuild" Version="3.7.4">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="3.1.0" />
  </ItemGroup>

  <ItemGroup>
    <DotNetCliToolReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Tools" Version="2.0.1" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\CF.Application\CF.Application.csproj" />
    <ProjectReference Include="..\CF.Common\CF.Common.csproj" />
    <ProjectReference Include="..\CF.Domain\CF.Domain.csproj" />
    <ProjectReference Include="..\CF.Web.AspNetCore\CF.Web.AspNetCore.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Content Update="appsettings.Development.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Update="appsettings.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Update="appsettings.Staging.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>

  <ItemGroup>
    <Content Remove="wwwroot\js\common.ts" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="wwwroot\dist\" />
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build" />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)build\**; $(SpaRoot)build-ssr\**" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <TypeScriptTarget>ES5</TypeScriptTarget>
    <TypeScriptJSXEmit>React</TypeScriptJSXEmit>
    <TypeScriptModuleKind />
    <TypeScriptCompileOnSaveEnabled>True</TypeScriptCompileOnSaveEnabled>
    <TypeScriptNoImplicitAny>False</TypeScriptNoImplicitAny>
    <TypeScriptRemoveComments>False</TypeScriptRemoveComments>
    <TypeScriptOutFile />
    <TypeScriptOutDir />
    <TypeScriptGeneratesDeclarations>False</TypeScriptGeneratesDeclarations>
    <TypeScriptNoEmitOnError>True</TypeScriptNoEmitOnError>
    <TypeScriptSourceMap>True</TypeScriptSourceMap>
    <TypeScriptMapRoot />
    <TypeScriptSourceRoot />
  </PropertyGroup>

  <!-- BEGIN: CF.Web custom instructions -->

  <!--  When running with IIS, start and recycle the application pool before building to ensure any locks are released that will prevent successully copying the build files. 
        If start is not called before recycle, an error can occur if the application pool was already stopped. Both the recycle and stop commands can only be applied to
        started application pools. A recycle is done instead of a stop here, as it is faster.
  -->
  <Target Name="IISDebugIISAppPoolStop" BeforeTargets="BeforeBuild" Condition="'$(ActiveDebugProfile)' == 'IIS' And Exists('C:\Windows\System32\inetsrv\appcmd.exe')">
    <Exec Command="C:\Windows\System32\inetsrv\appcmd.exe start APPPOOL &quot;CF.Web&quot;"></Exec>
    <Exec Command="C:\Windows\System32\inetsrv\appcmd.exe recycle APPPOOL &quot;CF.Web&quot;"></Exec>
  </Target>
  <!-- When running with IIS, user secrets must be copied to the web.config folder. -->
  <Target Name="IISDebugCopyUserSecrets" AfterTargets="AfterBuild" Condition="'$(ActiveDebugProfile)' == 'IIS'">
    <Copy SourceFiles="$(APPDATA)\Microsoft\UserSecrets\$(UserSecretsId)\secrets.json" DestinationFolder="$(ProjectDir)" SkipUnchangedFiles="true"></Copy>
  </Target>
  <!-- When running with IIS, copy the corresponding web.config. -->
  <Target Name="IISDebugCopyWebConfig" AfterTargets="AfterBuild" Condition="'$(ActiveDebugProfile)' == 'IIS'">
    <Copy SourceFiles="$(ProjectDir)\web.config.iis" DestinationFiles="$(ProjectDir)\web.config" SkipUnchangedFiles="true"></Copy>
  </Target>
  <!-- When running with IIS, ensure the application pool is started after successful builds. -->
  <Target Name="IISDebugIISAppPoolStart" AfterTargets="AfterBuild" Condition="'$(ActiveDebugProfile)' == 'IIS' And Exists('C:\Windows\System32\inetsrv\appcmd.exe')">
    <Exec Command="C:\Windows\System32\inetsrv\appcmd.exe start APPPOOL &quot;CF.Web&quot;"></Exec>
  </Target>

  <!-- When running with IIS Express, copy the corresponding web.config. -->
  <Target Name="IISExpressDebugCopyWebConfig" AfterTargets="AfterBuild" Condition="'$(ActiveDebugProfile)' == 'IIS Express'">
    <Copy SourceFiles="$(ProjectDir)\web.config.iisexpress" DestinationFiles="$(ProjectDir)\web.config" SkipUnchangedFiles="true"></Copy>
  </Target>
  
  <!-- END: CF.Web custom instructions -->
</Project>
